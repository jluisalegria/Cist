D G "__PCH__" 0 744 ""5.015""
D G "__DEVICE__" 0 744 "1450"
D G "__DATE__" 0 744 ""10-mar.-16""
D G "__TIME__" 0 744 ""17:07:42"" "Standard Header file for the PIC18F14K22 device ////////////////"
c L "set_tris_a" 1 3 6 "FUNCTION"
v L "value" 1 44 "int8" `54 
f B "set_tris_a" 1 44 "void(int8 value)" `53 
v L "value" 1 45 "int8" `56 
f B "set_tris_b" 1 45 "void(int8 value)" `55 
v L "value" 1 46 "int8" `58 
f B "set_tris_c" 1 46 "void(int8 value)" `57 
f B "get_tris_a" 1 47 "int8()" `59 
f B "get_tris_b" 1 48 "int8()" `60 
f B "get_tris_c" 1 49 "int8()" `61 
v L "value" 1 50 "int8" `63 
f B "output_a" 1 50 "void(int8 value)" `62 
v L "value" 1 51 "int8" `65 
f B "output_b" 1 51 "void(int8 value)" `64 
v L "value" 1 52 "int8" `67 
f B "output_c" 1 52 "void(int8 value)" `66 
f B "input_a" 1 53 "int8()" `68 
f B "input_b" 1 54 "int8()" `69 
f B "input_c" 1 55 "int8()" `70 
f B "input_change_a" 1 56 "int8()" `71 
f B "input_change_b" 1 57 "int8()" `72 
f B "input_change_c" 1 58 "int8()" `73 
v L "pin" 1 59 "int16" `75 
f B "input" 1 59 "int8(int16 pin)" `74 
v L "pin" 1 60 "int16" `77 
f B "input_state" 1 60 "int8(int16 pin)" `76 
v L "pin" 1 61 "int16" `79 
f B "output_low" 1 61 "void(int16 pin)" `78 
v L "pin" 1 62 "int16" `81 
f B "output_high" 1 62 "void(int16 pin)" `80 
v L "pin" 1 63 "int16" `83 
f B "output_toggle" 1 63 "void(int16 pin)" `82 
v L "pin" 1 64 "int16" `85 
v L "level" 1 64 "int8" `86 
f B "output_bit" 1 64 "void(int16 pin,int8 level)" `84 
v L "pin" 1 65 "int16" `88 
f B "output_float" 1 65 "void(int16 pin)" `87 
v L "pin" 1 66 "int16" `90 
f B "output_drive" 1 66 "void(int16 pin)" `89  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 70 "31744"
d G "PIN_A1" 1 71 "31745"
d G "PIN_A2" 1 72 "31746"
d G "PIN_A3" 1 73 "31747"
d G "PIN_A4" 1 74 "31748"
d G "PIN_A5" 1 75 "31749"
d G "PIN_B4" 1 77 "31756"
d G "PIN_B5" 1 78 "31757"
d G "PIN_B6" 1 79 "31758"
d G "PIN_B7" 1 80 "31759"
d G "PIN_C0" 1 82 "31760"
d G "PIN_C1" 1 83 "31761"
d G "PIN_C2" 1 84 "31762"
d G "PIN_C3" 1 85 "31763"
d G "PIN_C4" 1 86 "31764"
d G "PIN_C5" 1 87 "31765"
d G "PIN_C6" 1 88 "31766"
d G "PIN_C7" 1 89 "31767"
d G "FALSE" 1 92 "0"
d G "TRUE" 1 93 "1"
d G "BYTE" 1 95 "int8"
d G "BOOLEAN" 1 96 "int1"
d G "getc" 1 98 "getch"
d G "fgetc" 1 99 "getch"
d G "getchar" 1 100 "getch"
d G "putc" 1 101 "putchar"
d G "fputc" 1 102 "putchar"
d G "fgets" 1 103 "gets"
d G "fputs" 1 104 "puts"
c L "output_drive" 1 3 3 "FUNCTION"
f B "restart_cause" 1 109 "int8()" `91 
f B "reset_cpu" 1 110 "void()" `92 
f B "sleep" 1 111 "void()" `93 
v L "type" 1 112 "int8" `95 
f G "sleep" 1 112 "void(int8 type)" `94  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 1 114 "7"
d G "MCLR_FROM_SLEEP" 1 115 "11"
d G "MCLR_FROM_RUN" 1 116 "15"
d G "NORMAL_POWER_UP" 1 117 "12"
d G "BROWNOUT_RESTART" 1 118 "14"
d G "WDT_FROM_SLEEP" 1 119 "3"
d G "RESET_INSTRUCTION" 1 120 "0"
d G "SLEEP_FULL" 1 123 "0" "Default"
d G "SLEEP_IDLE" 1 124 "1" "Clock and peripherals don't stop"
c L "sleep" 1 3 5 "FUNCTION"
v L "mode" 1 131 "int8" `97 
f B "setup_timer_0" 1 131 "void(int8 mode)" `96 
v L "value" 1 132 "int16" `99 
f B "set_timer0" 1 132 "void(int16 value)" `98 
f B "get_timer0" 1 133 "int16()" `100 
v L "mode" 1 134 "int8" `102 
v L "prescaler" 1 134 "int8" `103 
f B "setup_counters" 1 134 "void(int8 mode,int8 prescaler)" `101 
v L "value" 1 135 "int16" `105 
f B "set_rtcc" 1 135 "void(int16 value)" `104 
f B "get_rtcc" 1 136 "int16()" `106  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 138 "0"
d G "T0_EXT_L_TO_H" 1 139 "32"
d G "T0_EXT_H_TO_L" 1 140 "48"
d G "T0_DIV_1" 1 142 "8"
d G "T0_DIV_2" 1 143 "0"
d G "T0_DIV_4" 1 144 "1"
d G "T0_DIV_8" 1 145 "2"
d G "T0_DIV_16" 1 146 "3"
d G "T0_DIV_32" 1 147 "4"
d G "T0_DIV_64" 1 148 "5"
d G "T0_DIV_128" 1 149 "6"
d G "T0_DIV_256" 1 150 "7"
d G "T0_OFF" 1 152 "0x80"
d G "T0_8_BIT" 1 154 "0x40"
d G "RTCC_INTERNAL" 1 156 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 157 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 158 "48"
d G "RTCC_DIV_1" 1 159 "8"
d G "RTCC_DIV_2" 1 160 "0"
d G "RTCC_DIV_4" 1 161 "1"
d G "RTCC_DIV_8" 1 162 "2"
d G "RTCC_DIV_16" 1 163 "3"
d G "RTCC_DIV_32" 1 164 "4"
d G "RTCC_DIV_64" 1 165 "5"
d G "RTCC_DIV_128" 1 166 "6"
d G "RTCC_DIV_256" 1 167 "7"
d G "RTCC_OFF" 1 168 "0x80"
d G "RTCC_8_BIT" 1 169 "0x40"
c L "get_rtcc" 1 3 8 "FUNCTION"
v L "mode" 1 180 "int16" `108 
f B "setup_wdt" 1 180 "void(int16 mode)" `107 
f B "restart_wdt" 1 181 "void()" `109  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 1 183 "0x100"
d G "WDT_OFF" 1 184 "0"
d G "WDT_4MS" 1 186 "0x300"
d G "WDT_8MS" 1 187 "0x500"
d G "WDT_16MS" 1 188 "0x700"
d G "WDT_32MS" 1 189 "0x900"
d G "WDT_64MS" 1 190 "0xB00"
d G "WDT_128MS" 1 191 "0xD00"
d G "WDT_256MS" 1 192 "0xF00"
d G "WDT_512MS" 1 193 "0x1100"
d G "WDT_1S" 1 194 "0x1300"
d G "WDT_2S" 1 195 "0x1500"
d G "WDT_4S" 1 196 "0x1700"
d G "WDT_8S" 1 197 "0x1900"
d G "WDT_16" 1 198 "0x1B00"
d G "WDT_32S" 1 199 "0x1D00"
d G "WDT_64S" 1 200 "0x1F00"
d G "WDT_128S" 1 201 "0x2100"
c L "restart_wdt" 1 3 3 "FUNCTION"
v L "mode" 1 207 "int16" `111 
f B "setup_timer_1" 1 207 "void(int16 mode)" `110 
f B "get_timer1" 1 208 "int16()" `112 
v L "value" 1 209 "int16" `114 
f B "set_timer1" 1 209 "void(int16 value)" `113  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 212 "0"
d G "T1_INTERNAL" 1 213 "0x85"
d G "T1_EXTERNAL" 1 214 "0x87"
d G "T1_EXTERNAL_SYNC" 1 215 "0x83"
d G "T1_CLK_OUT" 1 217 "8"
d G "T1_DIV_BY_1" 1 219 "0"
d G "T1_DIV_BY_2" 1 220 "0x10"
d G "T1_DIV_BY_4" 1 221 "0x20"
d G "T1_DIV_BY_8" 1 222 "0x30"
c L "set_timer1" 1 3 3 "FUNCTION"
v L "mode" 1 227 "int8" `116 
v L "period" 1 227 "int8" `117 
v L "postscale" 1 227 "int8" `118 
f B "setup_timer_2" 1 227 "void(int8 mode,int8 period,int8 postscale)" `115 
f B "get_timer2" 1 228 "int8()" `119 
v L "value" 1 229 "int8" `121 
f B "set_timer2" 1 229 "void(int8 value)" `120  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 231 "0"
d G "T2_DIV_BY_1" 1 232 "4"
d G "T2_DIV_BY_4" 1 233 "5"
d G "T2_DIV_BY_16" 1 234 "6"
c L "set_timer2" 1 3 3 "FUNCTION"
v L "mode" 1 239 "int16" `123 
f B "setup_timer_3" 1 239 "void(int16 mode)" `122 
f B "get_timer3" 1 240 "int16()" `124 
v L "value" 1 241 "int16" `126 
f B "set_timer3" 1 241 "void(int16 value)" `125  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 1 244 "0"
d G "T3_INTERNAL" 1 245 "0x85"
d G "T3_EXTERNAL" 1 246 "0x87"
d G "T3_EXTERNAL_SYNC" 1 247 "0x83"
d G "T3_DIV_BY_1" 1 249 "0"
d G "T3_DIV_BY_2" 1 250 "0x10"
d G "T3_DIV_BY_4" 1 251 "0x20"
d G "T3_DIV_BY_8" 1 252 "0x30"
c L "set_timer3" 1 3 4 "FUNCTION"
v L "mode" 1 258 "int32" `128 
f B "setup_ccp1" 1 258 "void(int32 mode)" `127 
v L "mode" 1 259 "int32" `130 
v L "pwm" 1 259 "int8" `131 
f G "setup_ccp1" 1 259 "void(int32 mode,int8 pwm)" `129 
v L "value" 1 260 "int16" `133 
f B "set_pwm1_duty" 1 260 "void(int16 value)" `132  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 262 "0"
d G "CCP_CAPTURE_FE" 1 263 "4"
d G "CCP_CAPTURE_RE" 1 264 "5"
d G "CCP_CAPTURE_DIV_4" 1 265 "6"
d G "CCP_CAPTURE_DIV_16" 1 266 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 1 267 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 268 "9"
d G "CCP_COMPARE_INT" 1 269 "0xA"
d G "CCP_COMPARE_INT_AND_TOGGLE" 1 270 "0x2"
d G "CCP_COMPARE_RESET_TIMER" 1 271 "0xB"
d G "CCP_PWM" 1 272 "0xC"
d G "CCP_PWM_PLUS_1" 1 273 "0x1c"
d G "CCP_PWM_PLUS_2" 1 274 "0x2c"
d G "CCP_PWM_PLUS_3" 1 275 "0x3c"
c L "set_pwm1_duty" 1 3 1 "FUNCTION"
d G "T3_CCP2" 1 281 "0x8"
d G "CCP_PWM_H_H" 1 284 "0x0c"
d G "CCP_PWM_H_L" 1 285 "0x0d"
d G "CCP_PWM_L_H" 1 286 "0x0e"
d G "CCP_PWM_L_L" 1 287 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 1 289 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 1 290 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 1 291 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 1 293 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 1 294 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 1 295 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 1 296 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 1 297 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 1 298 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 1 299 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 1 301 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 1 302 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 1 303 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 1 305 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 1 306 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 1 307 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 1 309 "0x80000000"
d G "CCP_PULSE_STEERING_A" 1 311 "0x01000000"
d G "CCP_PULSE_STEERING_B" 1 312 "0x02000000"
d G "CCP_PULSE_STEERING_C" 1 313 "0x04000000"
d G "CCP_PULSE_STEERING_D" 1 314 "0x08000000"
d G "CCP_PULSE_STEERING_SYNC" 1 315 "0x10000000"
c L "set_pwm1_duty" 1 3 1 "FUNCTION"
v L "mode" 1 319 "int32" `138 
f B "setup_ccp2" 1 319 "void(int32 mode)" `137 
v L "mode" 1 320 "int32" `140 
v L "pwm" 1 320 "int8" `141 
f G "setup_ccp2" 1 320 "void(int32 mode,int8 pwm)" `139 
v L "value" 1 321 "int16" `143 
f B "set_pwm2_duty" 1 321 "void(int16 value)" `142 
c L "set_pwm2_duty" 1 3 1 "FUNCTION"
v L "mode" 1 327 "int32" `148 
f B "setup_ccp3" 1 327 "void(int32 mode)" `147 
v L "mode" 1 328 "int32" `150 
v L "pwm" 1 328 "int8" `151 
f G "setup_ccp3" 1 328 "void(int32 mode,int8 pwm)" `149 
v L "value" 1 329 "int16" `153 
f B "set_pwm3_duty" 1 329 "void(int16 value)" `152 
c L "set_pwm3_duty" 1 3 1 "FUNCTION"
v L "mode" 1 335 "int32" `158 
f B "setup_ccp4" 1 335 "void(int32 mode)" `157 
v L "mode" 1 336 "int32" `160 
v L "pwm" 1 336 "int8" `161 
f G "setup_ccp4" 1 336 "void(int32 mode,int8 pwm)" `159 
v L "value" 1 337 "int16" `163 
f B "set_pwm4_duty" 1 337 "void(int16 value)" `162 
c L "set_pwm4_duty" 1 3 3 "FUNCTION"
v L "mode" 1 344 "int32" `168 
f B "setup_spi" 1 344 "void(int32 mode)" `167 
v L "value" 1 345 "int8" `170 
f B "spi_write" 1 345 "void(int8 value)" `169 
f B "spi_read" 1 346 "int8()" `171 
v L "value" 1 347 "int8" `173 
f G "spi_read" 1 347 "int8(int8 value)" `172 
f B "spi_data_in" 1 348 "int8()" `174  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 350 "0x00"
d G "SPI_MASTER" 1 351 "0x20"
d G "SPI_SLAVE" 1 352 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 353 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 354 "0x00"
d G "SPI_CLK_DIV_4" 1 355 "0x00"
d G "SPI_CLK_DIV_16" 1 356 "0x01"
d G "SPI_CLK_DIV_64" 1 357 "0x02"
d G "SPI_CLK_T2" 1 358 "0x03"
d G "SPI_SS_DISABLED" 1 359 "0x01"
d G "SPI_XMIT_L_TO_H" 1 361 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 362 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 364 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 365 "0x8000"
d G "SPI_L_TO_H" 1 368 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 369 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 1 3 2 "FUNCTION"
v L "baud" 1 373 "int32" `176 
f B "setup_uart" 1 373 "void(int32 baud)" `175 
v L "baud" 1 374 "int32" `178 
v L "stream" 1 374 "int8" `179 
f G "setup_uart" 1 374 "void(int32 baud,int8 stream)" `177 
v L "baud" 1 375 "int32" `181 
v L "stream" 1 375 "int8" `182 
v L "clock" 1 375 "int32" `183 
f G "setup_uart" 1 375 "void(int32 baud,int8 stream,int32 clock)" `180 
v L "baud" 1 376 "int32" `185 
f B "set_uart_speed" 1 376 "void(int32 baud)" `184 
v L "baud" 1 377 "int32" `187 
v L "stream" 1 377 "int8" `188 
f G "set_uart_speed" 1 377 "void(int32 baud,int8 stream)" `186 
v L "baud" 1 378 "int32" `190 
v L "stream" 1 378 "int8" `191 
v L "clock" 1 378 "int32" `192 
f G "set_uart_speed" 1 378 "void(int32 baud,int8 stream,int32 clock)" `189  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 382 "2"
d G "UART_DATA" 1 383 "4"
d G "UART_AUTODETECT" 1 384 "8"
d G "UART_AUTODETECT_NOWAIT" 1 385 "9"
d G "UART_WAKEUP_ON_RDA" 1 386 "10"
d G "UART_SEND_BREAK" 1 387 "13"
c L "set_uart_speed" 1 3 3 "FUNCTION"
v L "mode" 1 391 "int32" `194 
f B "setup_comparator" 1 391 "void(int32 mode)" `193  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 1 394 "0x404"
d G "NC_NC" 1 395 "0x404"
d G "CP1_A1_A0" 1 398 "0x4000080"
d G "CP1_C1_A0" 1 399 "0x0100081"
d G "CP1_C2_A0" 1 400 "0x0200082"
d G "CP1_C3_A0" 1 401 "0x0400083"
d G "CP1_A1_VREF" 1 402 "0x4000084"
d G "CP1_C1_VREF" 1 403 "0x0100085"
d G "CP1_C2_VREF" 1 404 "0x0200086"
d G "CP1_C3_VREF" 1 405 "0x0400087"
d G "CP1_OUT_ON_A2" 1 407 "0x2000020"
d G "CP1_INVERT" 1 408 "0x0000010"
d G "CP1_FAST" 1 409 "0x0000008"
d G "CP2_A1_C0" 1 412 "0x4008000"
d G "CP2_C1_C0" 1 413 "0x0108100"
d G "CP2_C2_C0" 1 414 "0x0208200"
d G "CP2_C3_C0" 1 415 "0x0408300"
d G "CP2_A1_VREF" 1 416 "0x4008400"
d G "CP2_C1_VREF" 1 417 "0x0108500"
d G "CP2_C2_VREF" 1 418 "0x0208600"
d G "CP2_C3_VREF" 1 419 "0x0408700"
d G "CP2_OUT_ON_C4" 1 421 "0x0082000"
d G "CP2_INVERT" 1 422 "0x0001000"
d G "CP2_FAST" 1 423 "0x0000800"
c L "setup_comparator" 1 3 2 "FUNCTION"
v L "mode" 1 430 "int8" `198 
f B "setup_vref" 1 430 "void(int8 mode)" `197  "Constants used in setup_vref() are:"
d G "VREF_OFF" 1 432 "0"
d G "VREF_1v024" 1 433 "0x90"
d G "VREF_2v048" 1 434 "0xA0"
d G "VREF_4v096" 1 435 "0xB0"
c L "setup_vref" 1 3 2 "FUNCTION"
v L "mode" 1 439 "int8" `200 
f B "setup_low_volt_detect" 1 439 "void(int8 mode)" `199  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 1 441 "0x1F"
d G "LVD_45" 1 442 "0x1E"
d G "LVD_42" 1 443 "0x1D"
d G "LVD_40" 1 444 "0x1C"
d G "LVD_38" 1 445 "0x1B"
d G "LVD_36" 1 446 "0x1A"
d G "LVD_35" 1 447 "0x19"
d G "LVD_33" 1 448 "0x18"
d G "LVD_30" 1 449 "0x17"
d G "LVD_28" 1 450 "0x16"
d G "LVD_27" 1 451 "0x15"
d G "LVD_25" 1 452 "0x14"
d G "LVD_24" 1 453 "0x13"
d G "LVD_23" 1 454 "0x12"
d G "LVD_22" 1 455 "0x11"
d G "LVD_21" 1 456 "0x10"
c L "setup_low_volt_detect" 1 3 3 "FUNCTION"
v L "mode" 1 461 "int8" `202 
f B "setup_dac" 1 461 "void(int8 mode)" `201 
v L "value" 1 462 "int8" `204 
f B "dac_write" 1 462 "void(int8 value)" `203  "Constants used in SETUP_DAC() are:"
d G "DAC_OFF" 1 464 "0"
d G "DAC_VSS_VDD" 1 465 "0x80"
d G "DAC_VREF_VDD" 1 466 "0x81"
d G "DAC_VSS_VREF" 1 467 "0x84"
d G "DAC_VREF_VREF" 1 468 "0x85"
d G "DAC_VSS_FVR" 1 469 "0x88"
d G "DAC_FVR_VREF" 1 470 "0x89"
d G "DAC_OUTPUT" 1 472 "0x20"
d G "DAC_LVP_POS" 1 473 "0x40"
d G "DAC_LVP_NEG" 1 474 "0"
c L "dac_write" 1 3 2 "FUNCTION"
v L "mode" 1 479 "int8" `206 
f B "setup_oscillator" 1 479 "int8(int8 mode)" `205 
v L "mode" 1 480 "int8" `208 
v L "tune" 1 480 "sint8" `209 
f G "setup_oscillator" 1 480 "int8(int8 mode,sint8 tune)" `207  "Constants used in setup_oscillator() are:"
d G "OSC_PLL_ON" 1 482 "0x4000"
d G "OSC_PLL_OFF" 1 483 "0"
d G "OSC_31250" 1 484 "0x8000"
d G "OSC_31KHZ" 1 485 "0x00"
d G "OSC_250KHZ" 1 486 "0x10"
d G "OSC_500KHZ" 1 487 "0x20"
d G "OSC_1MHZ" 1 488 "0x30"
d G "OSC_2MHZ" 1 489 "0x40"
d G "OSC_4MHZ" 1 490 "0x50"
d G "OSC_8MHZ" 1 491 "0x60"
d G "OSC_16MHZ" 1 492 "0x70"
d G "OSC_32MHZ" 1 493 "0x4060"
d G "OSC_64MHZ" 1 494 "0x4070"
d G "OSC_TIMER1" 1 496 "1"
d G "OSC_INTRC" 1 497 "2"
d G "OSC_NORMAL" 1 498 "0"
d G "OSC_IDLE_MODE" 1 500 "0x80"
d G "OSC_STATE_STABLE" 1 504 "4"
d G "OSC_STATE_EXT_RUNNING" 1 505 "8"
c L "setup_oscillator" 1 3 4 "FUNCTION"
v L "mode" 1 512 "int16" `211 
f B "setup_adc" 1 512 "void(int16 mode)" `210 
f B "read_adc" 1 513 "int8()" `212 
v L "mode" 1 514 "int8" `214 
f G "read_adc" 1 514 "int8(int8 mode)" `213 
f G "read_adc" 1 515 "int16()" `215 
v L "mode" 1 516 "int8" `217 
f G "read_adc" 1 516 "int16(int8 mode)" `216 
f B "adc_done" 1 517 "int8()" `218  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 519 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 520 "0x100"
d G "ADC_CLOCK_DIV_4" 1 521 "0x04"
d G "ADC_CLOCK_DIV_8" 1 522 "0x01"
d G "ADC_CLOCK_DIV_16" 1 523 "0x05"
d G "ADC_CLOCK_DIV_32" 1 524 "0x02"
d G "ADC_CLOCK_DIV_64" 1 525 "0x06"
d G "ADC_CLOCK_INTERNAL" 1 526 "0x07" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 1 528 "0x00"
d G "ADC_TAD_MUL_2" 1 529 "0x08"
d G "ADC_TAD_MUL_4" 1 530 "0x10"
d G "ADC_TAD_MUL_6" 1 531 "0x18"
d G "ADC_TAD_MUL_8" 1 532 "0x20"
d G "ADC_TAD_MUL_12" 1 533 "0x28"
d G "ADC_TAD_MUL_16" 1 534 "0x30"
d G "ADC_TAD_MUL_20" 1 535 "0x38"
c L "adc_done" 1 3 1 "FUNCTION"
v L "pins" 1 538 "int32" `220 
f B "setup_adc_ports" 1 538 "void(int32 pins)" `219 
v L "pins" 1 539 "int32" `222 
v L "reference" 1 539 "int32" `223 
f G "setup_adc_ports" 1 539 "void(int32 pins,int32 reference)" `221 
v L "channel" 1 540 "int8" `225 
f B "set_adc_channel" 1 540 "void(int8 channel)" `224  "Constants used in SETUP_ADC_PORTS() are:"
d G "sAN0" 1 544 "0x10000" "| A0"
d G "sAN1" 1 545 "0x20000" "| A1"
d G "sAN2" 1 546 "0x40000" "| A2"
d G "sAN3" 1 547 "0x80000" "| A4"
d G "sAN4" 1 548 "0x100000" "| C0"
d G "sAN5" 1 549 "0x200000" "| C1"
d G "sAN6" 1 550 "0x400000" "| C2"
d G "sAN7" 1 551 "0x800000" "| C3"
d G "sAN8" 1 552 "0x1" "| C6"
d G "sAN9" 1 553 "0x2" "| C7"
d G "sAN10" 1 554 "0x4" "| B4"
d G "sAN11" 1 555 "0x8" "| B5"
d G "NO_ANALOGS" 1 556 "0" "None"
d G "ALL_ANALOG" 1 557 "0xF00FF" "A0 A1 A2 A4 C0 C1 C2 C3 C6 C7 B4 B5"
d G "VSS_VDD" 1 560 "0x000" "| Range 0-Vdd"
d G "VSS_FVR" 1 561 "0x800" "| Range 0-FVR"
d G "VREF_VREF" 1 562 "0x500" "| Range VrefL-VrefH"
d G "VSS_VREF" 1 563 "0x400" "| Range 0-VrefH"
d G "VREF_VDD" 1 564 "0x100" "| Range VrefL-Vdd"
d G "DAC_CHANNEL" 1 568 "14"
d G "FVR_CHANNEL" 1 569 "15"
d G "ADC_START_AND_READ" 1 572 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 573 "1"
d G "ADC_READ_ONLY" 1 574 "6"
c L "set_adc_channel" 1 3 3 "FUNCTION"
v L "x" 1 580 "sint8" `227 
f B "abs" 1 580 "sint8(sint8 x)" `226 
v L "x" 1 581 "sint16" `229 
f G "abs" 1 581 "sint16(sint16 x)" `228 
v L "x" 1 582 "sint32" `231 
f G "abs" 1 582 "sint32(sint32 x)" `230 
v L "x" 1 583 "float" `233 
f G "abs" 1 583 "float(float x)" `232 
v L "??65535" 1 584 "int8" `235 
v L "??65535" 1 584 "int8" `236 
f B "_mul" 1 584 "int16(int8 ,int8 )" `234 
v L "??65535" 1 585 "sint8" `235 
v L "??65535" 1 585 "sint8" `239 
f G "_mul" 1 585 "sint16(sint8 ,sint8 )" `237 
v L "??65535" 1 586 "int16" `235 
v L "??65535" 1 586 "int16" `242 
f G "_mul" 1 586 "int32(int16 ,int16 )" `240 
v L "??65535" 1 587 "sint16" `235 
v L "??65535" 1 587 "sint16" `245 
f G "_mul" 1 587 "sint32(sint16 ,sint16 )" `243  "Memory Manipulation Prototypes:"
v L "bank" 1 590 "int8" `247 
v L "offset" 1 590 "int8" `248 
f B "read_bank" 1 590 "int8(int8 bank,int8 offset)" `246 
v L "bank" 1 591 "int8" `250 
v L "offset" 1 591 "int8" `251 
v L "value" 1 591 "int8" `252 
f B "write_bank" 1 591 "void(int8 bank,int8 offset,int8 value)" `249 
v L "dest" 1 592 "*int8" `254 
v L "src" 1 592 "*int8" `255 
f B "strcpy" 1 592 "void(*int8 dest,*int8 src)" `253 
v L "dest" 1 593 "*int8" `257 
v L "src" 1 593 "*int8" `258 
f B "strcopy" 1 593 "void(*int8 dest,*int8 src)" `256 
v L "destination" 1 594 "*int8" `260 
v L "value" 1 594 "int8" `261 
v L "num" 1 594 "int16" `262 
f B "memset" 1 594 "void(*int8 destination,int8 value,int16 num)" `259 
v L "destination" 1 595 "*int8" `264 
v L "source" 1 595 "*int8" `265 
v L "num" 1 595 "int16" `266 
f B "memcpy" 1 595 "void(*int8 destination,*int8 source,int16 num)" `263  "String Prototypes:"
v L "cvalue" 1 598 "int8" `268 
f B "toupper" 1 598 "int8(int8 cvalue)" `267 
v L "cvalue" 1 599 "int8" `270 
f B "tolower" 1 599 "int8(int8 cvalue)" `269 
v L "string" 1 600 "*int8" `272 
v L "cstring" 1 600 "*int8" `273 
f B "sprintf" 1 600 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `271  "Data Manipulators Prototypes:"
v L "address" 1 603 "*int8" `276 
v L "bytes" 1 603 "int8" `277 
v L "value" 1 603 "int8" `278 
f B "shift_left" 1 603 "int8(*int8 address,int8 bytes,int8 value)" `275 
v L "address" 1 604 "*int8" `280 
v L "bytes" 1 604 "int8" `281 
v L "value" 1 604 "int8" `282 
f B "shift_right" 1 604 "int8(*int8 address,int8 bytes,int8 value)" `279 
v L "address" 1 605 "*int8" `284 
v L "bytes" 1 605 "int8" `285 
f B "rotate_left" 1 605 "void(*int8 address,int8 bytes)" `283 
v L "address" 1 606 "*int8" `287 
v L "bytes" 1 606 "int8" `288 
f B "rotate_right" 1 606 "void(*int8 address,int8 bytes)" `286 
v L "value" 1 607 "int8" `290 
f B "swap" 1 607 "void(int8 value)" `289 
v L "var" 1 608 "int16" `292 
v L "offset" 1 608 "int8" `293 
f B "make8" 1 608 "int8(int16 var,int8 offset)" `291 
v L "var" 1 609 "int32" `292 
v L "offset" 1 609 "int8" `296 
f G "make8" 1 609 "int8(int32 var,int8 offset)" `294 
v L "varhigh" 1 610 "int8" `298 
v L "varlow" 1 610 "int8" `299 
f B "make16" 1 610 "int16(int8 varhigh,int8 varlow)" `297 
v L "var1" 1 611 "int16" `301 
f B "make32" 1 611 "int32(int16 var1)" `300 
v L "var1" 1 612 "int16" `303 
v L "var2" 1 612 "int16" `304 
f G "make32" 1 612 "int32(int16 var1,int16 var2)" `302 
v L "var1" 1 613 "int16" `303 
v L "var2" 1 613 "int8" `307 
f G "make32" 1 613 "int32(int16 var1,int8 var2)" `305 
v L "var1" 1 614 "int16" `309 
v L "var2" 1 614 "int8" `310 
v L "var3" 1 614 "int8" `311 
f G "make32" 1 614 "int32(int16 var1,int8 var2,int8 var3)" `308 
v L "var1" 1 615 "int8" `313 
f G "make32" 1 615 "int32(int8 var1)" `312 
v L "var1" 1 616 "int8" `303 
v L "var2" 1 616 "int8" `316 
f G "make32" 1 616 "int32(int8 var1,int8 var2)" `314 
v L "var1" 1 617 "int8" `309 
v L "var2" 1 617 "int8" `310 
v L "var3" 1 617 "int8" `320 
f G "make32" 1 617 "int32(int8 var1,int8 var2,int8 var3)" `317 
v L "var1" 1 618 "int8" `322 
v L "var2" 1 618 "int8" `323 
v L "var3" 1 618 "int8" `324 
v L "var4" 1 618 "int8" `325 
f G "make32" 1 618 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `321 
v L "var1" 1 619 "int8" `303 
v L "var2" 1 619 "int16" `328 
f G "make32" 1 619 "int32(int8 var1,int16 var2)" `326 
v L "var1" 1 620 "int8" `309 
v L "var2" 1 620 "int16" `310 
v L "var3" 1 620 "int8" `332 
f G "make32" 1 620 "int32(int8 var1,int16 var2,int8 var3)" `329 
v L "var1" 1 621 "int8" `309 
v L "var2" 1 621 "int8" `310 
v L "var3" 1 621 "int16" `336 
f G "make32" 1 621 "int32(int8 var1,int8 var2,int16 var3)" `333 
v L "var" 1 622 "int8" `338 
v L "bit" 1 622 "int8" `339 
f B "bit_set" 1 622 "void(int8 var,int8 bit)" `337 
v L "var" 1 623 "int16" `338 
v L "bit" 1 623 "int8" `342 
f G "bit_set" 1 623 "void(int16 var,int8 bit)" `340 
v L "var" 1 624 "int32" `338 
v L "bit" 1 624 "int8" `345 
f G "bit_set" 1 624 "void(int32 var,int8 bit)" `343 
v L "var" 1 625 "int8" `347 
v L "bit" 1 625 "int8" `348 
f B "bit_clear" 1 625 "void(int8 var,int8 bit)" `346 
v L "var" 1 626 "int16" `347 
v L "bit" 1 626 "int8" `351 
f G "bit_clear" 1 626 "void(int16 var,int8 bit)" `349 
v L "var" 1 627 "int32" `347 
v L "bit" 1 627 "int8" `354 
f G "bit_clear" 1 627 "void(int32 var,int8 bit)" `352 
v L "var" 1 628 "int8" `356 
v L "bit" 1 628 "int8" `357 
f B "bit_test" 1 628 "int8(int8 var,int8 bit)" `355 
v L "var" 1 629 "int16" `356 
v L "bit" 1 629 "int8" `360 
f G "bit_test" 1 629 "int8(int16 var,int8 bit)" `358 
v L "var" 1 630 "int32" `356 
v L "bit" 1 630 "int8" `363 
f G "bit_test" 1 630 "int8(int32 var,int8 bit)" `361  "#use delay() Prototypes:"
v L "count" 1 633 "int8" `365 
f B "delay_cycles" 1 633 "void(int8 count)" `364 
v L "time" 1 634 "int16" `367 
f B "delay_ms" 1 634 "void(int16 time)" `366 
v L "time" 1 635 "int16" `369 
f B "delay_us" 1 635 "void(int16 time)" `368  "#use rs232() Prototypes:"
v L "cdata" 1 638 "int8" `371 
f B "putchar" 1 638 "void(int8 cdata)" `370 
v L "cdata" 1 639 "int8" `373 
v L "stream" 1 639 "int8" `374 
f G "putchar" 1 639 "void(int8 cdata,int8 stream)" `372 
v L "string" 1 640 "*int8" `376 
f B "puts" 1 640 "void(*int8 string)" `375 
v L "string" 1 641 "*int8" `378 
v L "stream" 1 641 "int8" `379 
f G "puts" 1 641 "void(*int8 string,int8 stream)" `377 
f B "getch" 1 642 "int8()" `380 
v L "stream" 1 643 "int8" `382 
f G "getch" 1 643 "int8(int8 stream)" `381 
v L "string" 1 644 "*int8" `384 
f B "gets" 1 644 "void(*int8 string)" `383 
v L "string" 1 645 "*int8" `386 
v L "stream" 1 645 "int8" `387 
f G "gets" 1 645 "void(*int8 string,int8 stream)" `385 
f B "kbhit" 1 646 "int8()" `388 
v L "stream" 1 647 "int8" `390 
f G "kbhit" 1 647 "int8(int8 stream)" `389 
v L "string" 1 648 "*int8" `392 
f B "printf" 1 648 "void(*int8 string,*int8 _VA_LIST)" `391 
v L "stream" 1 649 "int8" `395 
v L "string" 1 649 "*int8" `396 
f B "fprintf" 1 649 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `394 
f B "putc_send" 1 650 "void()" `398 
v L "stream" 1 651 "int8" `400 
f B "fputc_send" 1 651 "void(int8 stream)" `399 
f B "rcv_buffer_full" 1 652 "int8()" `401 
v L "stream" 1 653 "int8" `403 
f G "rcv_buffer_full" 1 653 "int8(int8 stream)" `402 
f B "rcv_buffer_bytes" 1 654 "int16()" `404 
v L "stream" 1 655 "int8" `406 
f G "rcv_buffer_bytes" 1 655 "int16(int8 stream)" `405 
f B "tx_buffer_full" 1 656 "int8()" `407 
v L "stream" 1 657 "int8" `409 
f G "tx_buffer_full" 1 657 "int8(int8 stream)" `408 
f B "tx_buffer_bytes" 1 658 "int16()" `410 
v L "stream" 1 659 "int8" `412 
f G "tx_buffer_bytes" 1 659 "int16(int8 stream)" `411  "#use i2c() Prototypes:"
f B "i2c_read" 1 662 "int8()" `413 
v L "stream" 1 663 "int8" `415 
f G "i2c_read" 1 663 "int8(int8 stream)" `414 
v L "stream" 1 664 "int8" `417 
v L "ack" 1 664 "int8" `418 
f G "i2c_read" 1 664 "int8(int8 stream,int8 ack)" `416 
v L "data" 1 665 "int8" `420 
f B "i2c_write" 1 665 "int8(int8 data)" `419 
v L "stream" 1 666 "int8" `422 
v L "data" 1 666 "int8" `423 
f G "i2c_write" 1 666 "int8(int8 stream,int8 data)" `421 
f B "i2c_start" 1 667 "void()" `424 
v L "stream" 1 668 "int8" `426 
f G "i2c_start" 1 668 "void(int8 stream)" `425 
v L "stream" 1 669 "int8" `428 
v L "restart" 1 669 "int8" `429 
f G "i2c_start" 1 669 "void(int8 stream,int8 restart)" `427 
f B "i2c_stop" 1 670 "void()" `430 
v L "stream" 1 671 "int8" `432 
f G "i2c_stop" 1 671 "void(int8 stream)" `431 
f B "i2c_isr_state" 1 672 "int8()" `433 
v L "addr" 1 673 "int8" `435 
f B "i2c_slaveaddr" 1 673 "void(int8 addr)" `434 
v L "stream" 1 674 "int8" `437 
v L "addr" 1 674 "int8" `438 
f G "i2c_slaveaddr" 1 674 "void(int8 stream,int8 addr)" `436 
f B "i2c_poll" 1 675 "int8()" `439 
v L "stream" 1 676 "int8" `441 
f G "i2c_poll" 1 676 "int8(int8 stream)" `440 
v L "baud" 1 677 "int32" `443 
f B "i2c_init" 1 677 "void(int32 baud)" `442 
v L "stream" 1 678 "int8" `445 
v L "baud" 1 678 "int32" `446 
f G "i2c_init" 1 678 "void(int8 stream,int32 baud)" `444  "#use spi() Prototypes:"
f B "spi_xfer" 1 681 "int8()" `447 
f G "spi_xfer" 1 682 "int16()" `448 
f G "spi_xfer" 1 683 "int32()" `449 
v L "data" 1 684 "int8" `451 
f G "spi_xfer" 1 684 "int8(int8 data)" `450 
v L "data" 1 685 "int16" `453 
f G "spi_xfer" 1 685 "int16(int16 data)" `452 
v L "data" 1 686 "int32" `455 
f G "spi_xfer" 1 686 "int32(int32 data)" `454 
v L "stream" 1 687 "int8" `457 
v L "data" 1 687 "int8" `458 
f G "spi_xfer" 1 687 "int8(int8 stream,int8 data)" `456 
v L "stream" 1 688 "int8" `457 
v L "data" 1 688 "int16" `461 
f G "spi_xfer" 1 688 "int16(int8 stream,int16 data)" `459 
v L "stream" 1 689 "int8" `457 
v L "data" 1 689 "int32" `464 
f G "spi_xfer" 1 689 "int32(int8 stream,int32 data)" `462 
v L "stream" 1 690 "int8" `466 
v L "data" 1 690 "int8" `467 
v L "bits" 1 690 "int8" `468 
f G "spi_xfer" 1 690 "int8(int8 stream,int8 data,int8 bits)" `465 
v L "stream" 1 691 "int8" `466 
v L "data" 1 691 "int16" `467 
v L "bits" 1 691 "int8" `472 
f G "spi_xfer" 1 691 "int16(int8 stream,int16 data,int8 bits)" `469 
v L "stream" 1 692 "int8" `466 
v L "data" 1 692 "int32" `467 
v L "bits" 1 692 "int8" `476 
f G "spi_xfer" 1 692 "int32(int8 stream,int32 data,int8 bits)" `473 
v L "baud" 1 693 "int32" `478 
f B "spi_init" 1 693 "void(int32 baud)" `477 
v L "stream" 1 694 "int8" `480 
v L "baud" 1 694 "int32" `481 
f G "spi_init" 1 694 "void(int8 stream,int32 baud)" `479 
v L "baud" 1 695 "int32" `483 
f B "spi_speed" 1 695 "void(int32 baud)" `482 
v L "stream" 1 696 "int8" `485 
v L "baud" 1 696 "int32" `486 
f G "spi_speed" 1 696 "void(int8 stream,int32 baud)" `484 
v L "stream" 1 697 "int8" `488 
v L "baud" 1 697 "int32" `489 
v L "clock" 1 697 "int32" `490 
f G "spi_speed" 1 697 "void(int8 stream,int32 baud,int32 clock)" `487 
v L "data" 1 698 "int8" `492 
f B "spi_prewrite" 1 698 "void(int8 data)" `491 
v L "data" 1 699 "int16" `494 
f G "spi_prewrite" 1 699 "void(int16 data)" `493 
v L "data" 1 700 "int32" `496 
f G "spi_prewrite" 1 700 "void(int32 data)" `495 
v L "??65535" 1 701 "int8" `498 
v L "data" 1 701 "int8" `499 
f G "spi_prewrite" 1 701 "void(int8 ,int8 data)" `497 
v L "??65535" 1 702 "int8" `498 
v L "data" 1 702 "int16" `502 
f G "spi_prewrite" 1 702 "void(int8 ,int16 data)" `500 
v L "??65535" 1 703 "int8" `498 
v L "data" 1 703 "int32" `505 
f G "spi_prewrite" 1 703 "void(int8 ,int32 data)" `503 
f B "spi_xfer_in" 1 704 "int8()" `506 
f G "spi_xfer_in" 1 705 "int16()" `507 
f G "spi_xfer_in" 1 706 "int32()" `508 
v L "bits" 1 707 "int8" `510 
f G "spi_xfer_in" 1 707 "int8(int8 bits)" `509 
v L "bits" 1 708 "int8" `512 
f G "spi_xfer_in" 1 708 "int16(int8 bits)" `511 
v L "bits" 1 709 "int8" `514 
f G "spi_xfer_in" 1 709 "int32(int8 bits)" `513 
v L "stream" 1 710 "int8" `516 
v L "bits" 1 710 "int8" `517 
f G "spi_xfer_in" 1 710 "int8(int8 stream,int8 bits)" `515 
v L "stream" 1 711 "int8" `516 
v L "bits" 1 711 "int8" `520 
f G "spi_xfer_in" 1 711 "int16(int8 stream,int8 bits)" `518 
v L "stream" 1 712 "int8" `516 
v L "bits" 1 712 "int8" `523 
f G "spi_xfer_in" 1 712 "int32(int8 stream,int8 bits)" `521  "#use rtos() Prototypes:"
f B "rtos_run" 1 715 "void()" `524 
f B "rtos_yield" 1 716 "void()" `525 
v L "task" 1 717 "int8" `527 
f B "rtos_enable" 1 717 "void(int8 task)" `526 
v L "task" 1 718 "int8" `529 
f B "rtos_disable" 1 718 "void(int8 task)" `528 
f B "rtos_terminate" 1 719 "void()" `530 
v L "flag" 1 720 "int8" `532 
f B "rtos_await" 1 720 "void(int8 flag)" `531 
v L "sem" 1 721 "int8" `534 
f B "rtos_wait" 1 721 "void(int8 sem)" `533 
v L "sem" 1 722 "int8" `536 
f B "rtos_signal" 1 722 "void(int8 sem)" `535 
v L "task" 1 723 "int8" `538 
v L "msg" 1 723 "int8" `539 
f B "rtos_msg_send" 1 723 "void(int8 task,int8 msg)" `537 
f B "rtos_msg_read" 1 724 "int8()" `540 
f B "rtos_msg_poll" 1 725 "int8()" `541 
v L "task" 1 726 "int8" `543 
f B "rtos_overrun" 1 726 "int8(int8 task)" `542 
v L "task" 1 727 "int8" `545 
v L "stat" 1 727 "*int8" `546 
f B "rtos_stats" 1 727 "void(int8 task,*int8 stat)" `544  "#use timer() Prototypes:"
f B "get_ticks" 1 730 "int8()" `547 
f G "get_ticks" 1 731 "int16()" `548 
f G "get_ticks" 1 732 "int32()" `549 
v L "stream" 1 733 "int8" `551 
f G "get_ticks" 1 733 "int8(int8 stream)" `550 
v L "stream" 1 734 "int8" `553 
f G "get_ticks" 1 734 "int16(int8 stream)" `552 
v L "stream" 1 735 "int8" `555 
f G "get_ticks" 1 735 "int32(int8 stream)" `554 
v L "value" 1 736 "int8" `557 
f B "set_ticks" 1 736 "void(int8 value)" `556 
v L "value" 1 737 "int16" `559 
f G "set_ticks" 1 737 "void(int16 value)" `558 
v L "value" 1 738 "int32" `561 
f G "set_ticks" 1 738 "void(int32 value)" `560 
v L "stream" 1 739 "int8" `563 
v L "value" 1 739 "int8" `564 
f G "set_ticks" 1 739 "void(int8 stream,int8 value)" `562 
v L "stream" 1 740 "int8" `563 
v L "value" 1 740 "int16" `567 
f G "set_ticks" 1 740 "void(int8 stream,int16 value)" `565 
v L "stream" 1 741 "int8" `563 
v L "value" 1 741 "int32" `570 
f G "set_ticks" 1 741 "void(int8 stream,int32 value)" `568  "#use pwm() Prototypes:"
f B "pwm_on" 1 744 "void()" `571 
v L "stream" 1 745 "int8" `573 
f G "pwm_on" 1 745 "void(int8 stream)" `572 
f B "pwm_off" 1 746 "void()" `574 
v L "stream" 1 747 "int8" `576 
f G "pwm_off" 1 747 "void(int8 stream)" `575 
v L "duty" 1 748 "int16" `578 
f B "pwm_set_duty" 1 748 "void(int16 duty)" `577 
v L "stream" 1 749 "int8" `580 
v L "duty" 1 749 "int16" `581 
f G "pwm_set_duty" 1 749 "void(int8 stream,int16 duty)" `579 
v L "percent" 1 750 "int16" `583 
f B "pwm_set_duty_percent" 1 750 "void(int16 percent)" `582 
v L "stream" 1 751 "int8" `585 
v L "percent" 1 751 "int16" `586 
f G "pwm_set_duty_percent" 1 751 "void(int8 stream,int16 percent)" `584 
v L "frequency" 1 752 "int32" `588 
f B "pwm_set_frequency" 1 752 "void(int32 frequency)" `587 
v L "stream" 1 753 "int8" `590 
v L "frequency" 1 753 "int32" `591 
f G "pwm_set_frequency" 1 753 "void(int8 stream,int32 frequency)" `589  "#use capture() Prototypes:"
f B "get_capture_time" 1 756 "int16()" `592 
v L "stream" 1 757 "int8" `594 
f G "get_capture_time" 1 757 "int16(int8 stream)" `593 
f B "get_capture_event" 1 758 "int8()" `595 
v L "stream" 1 759 "int8" `597 
f G "get_capture_event" 1 759 "int8(int8 stream)" `596  "Enviroment Prototypes:"
c L "get_capture_event" 1 3 2 "FUNCTION"
v L "address" 1 772 "int16" `599 
f B "goto_address" 1 772 "void(int16 address)" `598 
v L "label" 1 773 "int16" `601 
f B "label_address" 1 773 "int16(int16 label)" `600  "Program Memory Prototypes:"
v L "address" 1 776 "int16" `603 
v L "dataptr" 1 776 "*int8" `604 
v L "count" 1 776 "int16" `605 
f B "read_program_memory" 1 776 "void(int16 address,*int8 dataptr,int16 count)" `602 
v L "address" 1 777 "int16" `607 
f B "read_program_eeprom" 1 777 "int16(int16 address)" `606 
v L "address" 1 778 "int16" `609 
f B "erase_program_eeprom" 1 778 "void(int16 address)" `608 
v L "address" 1 779 "int16" `611 
v L "dataptr" 1 779 "*int8" `612 
v L "count" 1 779 "int16" `613 
f B "write_program_memory" 1 779 "void(int16 address,*int8 dataptr,int16 count)" `610 
v L "address" 1 780 "int16" `615 
v L "data" 1 780 "int16" `616 
f B "write_program_eeprom" 1 780 "void(int16 address,int16 data)" `614  "EEPROM Prototypes:"
t G "__EEADDRESS__" 1 785 "int16" `617 
v L "address" 1 790 "__EEADDRESS__" `619 
f B "read_eeprom" 1 790 "int8(__EEADDRESS__ address)" `618 
v L "address" 1 791 "__EEADDRESS__" `621 
v L "value" 1 791 "int8" `622 
f B "write_eeprom" 1 791 "void(__EEADDRESS__ address,int8 value)" `620  "#use touchpad() Prototypes:"
v L "state" 1 794 "int8" `624 
f B "touchpad_state" 1 794 "void(int8 state)" `623 
f B "touchpad_getc" 1 795 "int8()" `625 
f B "touchpad_hit" 1 796 "int8()" `626  "INT"
c L "touchpad_hit" 1 3 4 "FUNCTION"
v L "interrupt" 1 802 "int32" `628 
f B "enable_interrupts" 1 802 "void(int32 interrupt)" `627 
v L "interrupt" 1 803 "int32" `630 
f B "disable_interrupts" 1 803 "void(int32 interrupt)" `629 
v L "interrupt" 1 804 "int32" `632 
f B "clear_interrupt" 1 804 "void(int32 interrupt)" `631 
v L "interrupt" 1 805 "int32" `634 
f B "interrupt_active" 1 805 "int8(int32 interrupt)" `633 
v L "interrupt" 1 806 "int32" `636 
f B "interrupt_enabled" 1 806 "int8(int32 interrupt)" `635 
v L "source" 1 807 "int8" `638 
v L "edge" 1 807 "int8" `639 
f B "ext_int_edge" 1 807 "void(int8 source,int8 edge)" `637 
v L "address" 1 808 "int16" `641 
f B "jump_to_irs" 1 808 "void(int16 address)" `640  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 810 "0x40"
d G "H_TO_L" 1 811 "0"
d G "GLOBAL" 1 813 "0xF2C0"
d G "PERIPH" 1 814 "0xF240"
d G "INT_RTCC" 1 815 "0x00F220"
d G "INT_TIMER0" 1 816 "0x00F220"
d G "INT_TIMER1" 1 817 "0x009D01"
d G "INT_TIMER2" 1 818 "0x009D02"
d G "INT_TIMER3" 1 819 "0x00A002"
d G "INT_EXT_L2H" 1 820 "0x5000F210"
d G "INT_EXT_H2L" 1 821 "0x6000F210"
d G "INT_EXT" 1 822 "0x00F210"
d G "INT_EXT1_L2H" 1 823 "0x5001F008"
d G "INT_EXT1_H2L" 1 824 "0x6001F008"
d G "INT_EXT1" 1 825 "0x00F008"
d G "INT_EXT2_L2H" 1 826 "0x5002F010"
d G "INT_EXT2_H2L" 1 827 "0x6002F010"
d G "INT_EXT2" 1 828 "0x00F010"
d G "INT_AD" 1 829 "0x009D40"
d G "INT_RDA" 1 830 "0x009D20"
d G "INT_TBE" 1 831 "0x009D10"
d G "INT_SSP" 1 832 "0x009D08"
d G "INT_CCP1" 1 833 "0x009D04"
d G "INT_BUSCOL" 1 834 "0x00A008"
d G "INT_COMP" 1 835 "0x00A040"
d G "INT_EEPROM" 1 836 "0x00A010"
d G "INT_OSCF" 1 837 "0x00A080"
d G "INT_COMP2" 1 838 "0x00A020"
d G "INT_RA" 1 839 "0x00FFF208"
d G "INT_RB" 1 840 "0x21FFF208"
d G "INT_RAB" 1 841 "0x02FFF208"
d G "INT_RA0" 1 842 "0x001F208"
d G "INT_RA1" 1 843 "0x002F208"
d G "INT_RA2" 1 844 "0x004F208"
d G "INT_RA3" 1 845 "0x008F208"
d G "INT_RA4" 1 846 "0x010F208"
d G "INT_RA5" 1 847 "0x020F208"
d G "INT_RB4" 1 848 "0x110F208"
d G "INT_RB5" 1 849 "0x120F208"
d G "INT_RB6" 1 850 "0x140F208"
d G "INT_RB7" 1 851 "0x180F208"
C L "jump_to_irs" 0 3 1 "*"
D G "Led_Status" 0 29 "PIN_C1"
D G "DRV_485" 0 30 "PIN_B6"
D G "DRV_Sensor" 0 31 "PIN_B4"
D G "Pin_Flotador" 0 32 "PIN_C2"
D G "Relay_Izq" 0 33 "PIN_C5"
D G "Relay_Der" 0 34 "PIN_C4"
C L "jump_to_irs" 0 35 1 "*"
C L "jump_to_irs" 0 36 1 "*"
V G "Blink" 0 37 "int8" `657 
V G "Tiempo" 0 38 "int8" `658 
V G "Blink_Flotador" 0 39 "int8" `659 
V G "Tiempo_Blink" 0 40 "int8" `660 
V G "Tiempo_Envio_CMD" 0 41 "int8" `661  "Tiempo Para el envio del comando status"
V G "Num_Serie1" 0 42 "int8" `662  "Numero de serie de la tarjeta 1er Byte"
V G "Metros_Cubicos_Cisterna" 0 43 "int8" `663 
C L "jump_to_irs" 0 36 1 "FUNCTION"
V G "Numero_de_Cisterna" 0 44 "int8" `664 
C L "jump_to_irs" 0 36 1 "FUNCTION"
C L "jump_to_irs" 0 46 3 "*"
V G "Distancia_Medida" 0 50 "int16" `665 
V G "Distancia_Medida_High" 0 51 "int8" `666 
V G "Distancia_Medida_Low" 0 52 "int8" `667 
V G "Distancia" 0 53 "int16" `668 
C L "jump_to_irs" 0 46 3 "FUNCTION"
V G "Medida_1" 0 56 "int16" `669 
V G "Medida_2" 0 57 "int16" `670 
V G "Medida_3" 0 58 "int16" `671 
V G "Medida_4" 0 59 "int16" `672 
V G "Distancia_Vacio" 0 61 "int16" `673 
V G "Distancia_Vacio_High" 0 62 "int8" `674 
V G "Distancia_Vacio_Low" 0 63 "int8" `675 
V G "Distancia_lleno" 0 65 "int16" `676 
V G "Distancia_Lleno_High" 0 66 "int8" `677 
V G "Distancia_Lleno_Low" 0 67 "int8" `678 
C L "jump_to_irs" 0 69 1 "*"
V G "Flotador" 0 70 "int8" `679 
C L "jump_to_irs" 0 69 1 "FUNCTION"
V G "Respuesta" 0 71 "int8" `680  "Bytes de Respuesta de algun CMD recibido, 00= Rechazado, 01= Aceptado"
V G "CMD_Ejecutado" 0 72 "int8" `681  "indica el comando del cual se esta dando respuesta"
V G "Segundos" 0 73 "int8" `682 
C L "jump_to_irs" 0 69 1 "FUNCTION"
V G "Estado_Relays" 0 74 "int8" `683 
C L "jump_to_irs" 0 69 1 "FUNCTION"
V G "Calculo1" 0 76 "int32" `684 
V G "Calculo2" 0 77 "int32" `685 
V G "Porcentaje" 0 78 "int8" `686 
C L "jump_to_irs" 0 79 2 "*"
V G "Char_Recibido_Pickit" 0 81 "int8" `687 
V G "Char_Recibido_RS485" 0 82 "int8" `688 
V G "Indice_Pickit" 0 83 "int8" `689 
V G "Indice_RS485" 0 84 "int8" `690 
V G "Indice_Sensor" 0 85 "int8" `691 
V G "Pickitbuff" 0 86 "int8[30]" `692 
V G "RS485buff" 0 87 "int8[30]" `693 
V G "Sensorbuff" 0 88 "int8[10]" `694 
V G "F_CMD_Completo_Pickit" 0 89 "int1" `695 
V G "F_CMD_Completo_RS485" 0 90 "int1" `696 
V G "F_CMD_Completo_Sensor" 0 91 "int1" `697 
C L "jump_to_irs" 0 93 2 "*"
F G "TIMER1_isr" 0 97 "void()" `698 
C L "EXT1_isr" 0 109 1 "*"
F G "EXT1_isr" 0 112 "void()" `699 
C L "EXT2_isr" 0 129 1 "*"
F G "EXT2_isr" 0 132 "void()" `700 
C L "RDA_isr" 0 147 1 "*"
F G "RDA_isr" 0 150 "void()" `701 
C L "RDA_isr" 0 147 1 "FUNCTION"
C L "RDA_isr" 0 147 1 "FUNCTION"
F G "Leer_Bytes_de_Config" 0 169 "void()" `702 
C L "Leer_Bytes_de_Config" 0 147 1 "FUNCTION"
C L "Leer_Bytes_de_Config" 0 147 1 "FUNCTION"
C L "Envia_Estado_Pickit" 0 187 1 "*"
F G "Envia_Estado_Pickit" 0 189 "void()" `703 
C L "Envia_Estado_Pickit" 0 187 4 "FUNCTION"
C L "Envia_Estado_Pickit" 0 187 2 "FUNCTION"
C L "Envia_Estado_RS485" 0 209 1 "*"
F G "Envia_Estado_RS485" 0 211 "void()" `704 
C L "Envia_Estado_RS485" 0 209 1 "FUNCTION"
C L "Actualiza_Estado_Relays" 0 235 1 "*"
F G "Actualiza_Estado_Relays" 0 237 "void()" `705 
C L "Estado_Flotador" 0 261 1 "*"
F G "Estado_Flotador" 0 263 "void()" `706  "if(input(Pin_Flotador))  == flotador NC"
C L "Estado_Flotador" 0 261 1 "FUNCTION"
C L "Estado_Flotador" 0 261 1 "FUNCTION"
C L "Estado_Flotador" 0 261 1 "FUNCTION"
C L "Lee_Distancia" 0 278 3 "*"
C L "Lee_Distancia" 0 278 1 "FUNCTION"
F G "Lee_Distancia" 0 282 "void()" `707 
C L "Lee_Distancia" 0 278 1 "FUNCTION"
C L "Calcula_Nivel" 0 288 3 "*"
F G "Calcula_Nivel" 0 293 "void()" `708 
C L "Calcula_Nivel" 0 288 1 "FUNCTION"
C L "Calcula_Nivel" 0 288 1 "FUNCTION"
C L "Calcula_Nivel" 0 288 1 "FUNCTION"
C L "Temporizaciones" 0 309 1 "*"
F G "Temporizaciones" 0 311 "void()" `715  "if(Segundos>=Tiempo_Envio_CMD && Tiempo_Envio_CMD != 0 ) //"
C L "Temporizaciones" 0 309 4 "FUNCTION"
C L "Verifica_CMD_Pickit" 0 336 1 "*"
F G "Verifica_CMD_Pickit" 0 338 "void()" `716 
C L "Verifica_CMD_Pickit" 0 336 1 "FUNCTION"
C L "Verifica_CMD_Pickit" 0 336 1 "FUNCTION"
C L "Verifica_CMD_Pickit" 0 336 1 "FUNCTION"
C L "Verifica_CMD_Pickit" 0 336 1 "FUNCTION"
V L "i" 0 351 "int8" `717 
C L "Verifica_CMD_Pickit" 0 336 1 "FUNCTION"
C L "Verifica_CMD_Pickit" 0 336 1 "FUNCTION"
C L "Verifica_CMD_Pickit" 0 336 1 "FUNCTION"
C L "Verifica_CMD_Pickit" 0 336 1 "FUNCTION"
C L "Verifica_CMD_Pickit" 0 336 1 "FUNCTION"
C L "Verifica_CMD_Pickit" 0 336 1 "FUNCTION"
C L "Verifica_CMD_Pickit" 0 336 1 "FUNCTION"
C L "Verifica_CMD_Pickit" 0 336 1 "FUNCTION"
C L "Verifica_CMD_Pickit" 0 336 1 "FUNCTION"
C L "Verifica_CMD_Pickit" 0 336 1 "FUNCTION"
C L "Verifica_CMD_Pickit" 0 336 1 "FUNCTION"
C L "Verifica_CMD_Pickit" 0 336 1 "FUNCTION"
C L "Verifica_CMD_Pickit" 0 336 1 "FUNCTION"
C L "Verifica_CMD_Pickit" 0 336 1 "FUNCTION"
C L "Verifica_CMD_Pickit" 0 336 1 "FUNCTION"
C L "Verifica_CMD_Pickit" 0 336 1 "FUNCTION"
C L "Verifica_CMD_Pickit" 0 336 1 "FUNCTION"
C L "Verifica_CMD_Pickit" 0 336 1 "FUNCTION"
C L "Verifica_CMD_Pickit" 0 336 1 "FUNCTION"
C L "Verifica_CMD_Pickit" 0 336 5 "FUNCTION"
C L "Verifica_CMD_RS485" 0 500 1 "*"
F G "Verifica_CMD_RS485" 0 502 "void()" `719 
C L "Verifica_CMD_RS485" 0 500 1 "FUNCTION"
V L "i" 0 513 "int8" `720 
C L "Verifica_CMD_RS485" 0 500 1 "FUNCTION"
C L "Verifica_CMD_RS485" 0 500 1 "FUNCTION"
C L "Verifica_CMD_RS485" 0 500 1 "FUNCTION"
C L "Verifica_CMD_RS485" 0 500 1 "FUNCTION"
C L "Verifica_CMD_RS485" 0 500 1 "FUNCTION"
C L "Verifica_CMD_RS485" 0 500 1 "FUNCTION"
C L "Verifica_CMD_RS485" 0 500 1 "FUNCTION"
C L "Verifica_CMD_RS485" 0 500 1 "FUNCTION"
C L "Verifica_CMD_RS485" 0 500 1 "FUNCTION"
C L "Verifica_CMD_RS485" 0 500 1 "FUNCTION"
C L "Verifica_CMD_RS485" 0 500 1 "FUNCTION"
C L "Verifica_CMD_RS485" 0 500 1 "FUNCTION"
C L "Verifica_CMD_Sensor" 0 658 1 "*"
F G "Verifica_CMD_Sensor" 0 660 "void()" `722 
C L "Verifica_CMD_Sensor" 0 658 1 "FUNCTION"
C L "MAIN" 0 685 2 "*"
F G "MAIN" 0 688 "void()" `728 
C L "MAIN" 0 685 1 "FUNCTION"
C L "MAIN" 0 685 1 "FUNCTION"
C L "MAIN" 0 709 1 "*"
C L "MAIN" 0 709 1 "FUNCTION"
C L "MAIN" 0 709 1 "FUNCTION"
C L "MAIN" 0 709 1 "FUNCTION"
C L "MAIN" 0 709 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "set_slow_slew_a" 1 0
F B "set_slow_slew_b" 1 0
F B "set_slow_slew_c" 1 0
F B "port_a_pullups" 1 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_ccp3" 1 0
F B "set_pwm3_duty" 1 0
F B "setup_ccp4" 1 0
F B "set_pwm4_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "setup_dac" 1 0
F B "dac_write" 1 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
